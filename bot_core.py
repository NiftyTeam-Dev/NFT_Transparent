import os
import tweepy
from dotenv import load_dotenv

load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á–∏ –∏–∑ .env

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Twitter
auth = tweepy.OAuth1UserHandler(
    consumer_key=os.getenv("CONSUMER_KEY"),
    consumer_secret=os.getenv("CONSUMER_SECRET"),
    access_token=os.getenv("ACCESS_TOKEN"),
    access_token_secret=os.getenv("ACCESS_TOKEN_SECRET")
)

api = tweepy.API(auth)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
try:
    user = api.verify_credentials()
    print(f"‚úÖ –ë–æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ @{user.screen_name}")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
    
    import time

def check_and_reply_to_dms():
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –õ–° (–º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å)
        dms = api.get_direct_messages(count=5)  
        
        for dm in dms:
            sender_id = dm.message_create["sender_id"]
            message_text = dm.message_create["message_data"]["text"]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–≤–µ—á–∞–ª–∏ –ª–∏ —É–∂–µ (—É–ø—Ä–æ—â—ë–Ω–Ω–æ)
            if not hasattr(dm, 'is_response'):  
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                reply_message = (
                    "üëã Hi! I'm a promotion bot for small creators!\n"
                    "My mission is to help artists, NFT makers, and startups grow on X.\n\n"
                    "Want me to share your work? Send your post, and my admin will review it! üöÄ"
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
                api.send_direct_message(sender_id, reply_message)
                print(f"üì§ Replied to user {sender_id}")
                
    except Exception as e:
        print(f"‚ùå Error in DM reply: {e}")
        
        if __name__ == "__main__":
    while True:
        check_and_reply_to_dms()
        time.sleep(300)  # –ü–∞—É–∑–∞ 5 –º–∏–Ω—É—Ç (300 —Å–µ–∫—É–Ω–¥)
        
        import sqlite3

# –°–æ–∑–¥–∞—ë–º –ë–î –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
conn = sqlite3.connect('bot_dms.db')
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS replied_users (user_id TEXT PRIMARY KEY)''')
conn.commit()

def check_and_reply_to_dms():
    try:
        dms = api.get_direct_messages(count=5)
        for dm in dms:
            sender_id = dm.message_create["sender_id"]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ user_id –≤ –ë–î
            cursor.execute("SELECT 1 FROM replied_users WHERE user_id=?", (sender_id,))
            if not cursor.fetchone():  # –ï—Å–ª–∏ –µ—â—ë –Ω–µ –æ—Ç–≤–µ—á–∞–ª–∏
                reply_message = "üëã Hi! I'm your friendly promo bot!..."
                api.send_direct_message(sender_id, reply_message)
                
                # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                cursor.execute("INSERT INTO replied_users VALUES (?)", (sender_id,))
                conn.commit()
                
    except Exception as e:
        print(f"Error: {e}")
        
        def check_dms():
    try:
        dms = api.get_direct_messages(count=5)  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –õ–°
        for dm in dms:
            sender_id = dm.message_create["sender_id"]
            text = dm.message_create["message_data"]["text"]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–≤–µ—á–∞–ª–∏ –ª–∏ —É–∂–µ
            if not dm.message_create.get("is_response", False):
                reply = (
                    "Hi! üëã I'm a promotion bot for small creators. "
                    "I help artists, NFT creators, and startups grow on X! "
                    "Want me to share your work? Send your post, and my admin will review it! üöÄ"
                )
                api.send_direct_message(sender_id, reply)
                print(f"üì© –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {sender_id}")
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –õ–°: {e}")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –õ–° –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ª—É—á—à–µ —á–µ—Ä–µ–∑ cron)
while True:
    check_dms()
    time.sleep(300)  # 5 –º–∏–Ω—É—Ç
        
# –î–∏–ø–°–∏–∫
from deepseek_api import DeepSeek  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∏–º–ø–æ—Ä—Ç (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ API)

deepseek = DeepSeek(api_key="7a043564893f42e59bcbdd665d4900f3")

def generate_comment(post_text, lang="en"):
    prompt = f"Write a friendly comment in {lang} for a post about: {post_text}"
    response = deepseek.generate(prompt, max_tokens=50)
    return response.choices[0].text.strip()
        
# –ü–æ–∏—Å–∫ –∏ –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–º–µ–Ω—Ç—ã
def search_and_comment(hashtag="NFT", count=3):
    try:
        tweets = api.search_tweets(q=f"#{hashtag}", result_type="recent", count=count)
        for tweet in tweets:
            if not tweet.user.following:  # –ï—Å–ª–∏ –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã
                api.create_friendship(tweet.user.id)  # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è (–ø—É–Ω–∫—Ç 2)
            
            lang = tweet.lang  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø–æ—Å—Ç–∞
            comment = generate_comment(tweet.text, lang)
            api.update_status(
                status=comment,
                in_reply_to_status_id=tweet.id,
                auto_populate_reply_metadata=True
            )
            print(f"üí¨ –ü—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ—Å—Ç {tweet.id} –Ω–∞ {lang}")
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞: {e}")        
        
        

        
